// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: networkMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_networkMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_networkMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021010 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_networkMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_networkMessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_networkMessage_2eproto;
class broadcastShare;
struct broadcastShareDefaultTypeInternal;
extern broadcastShareDefaultTypeInternal _broadcastShare_default_instance_;
class dealerShare;
struct dealerShareDefaultTypeInternal;
extern dealerShareDefaultTypeInternal _dealerShare_default_instance_;
class nodeInfo;
struct nodeInfoDefaultTypeInternal;
extern nodeInfoDefaultTypeInternal _nodeInfo_default_instance_;
class nodeInfoAck;
struct nodeInfoAckDefaultTypeInternal;
extern nodeInfoAckDefaultTypeInternal _nodeInfoAck_default_instance_;
class nodeInfoReply;
struct nodeInfoReplyDefaultTypeInternal;
extern nodeInfoReplyDefaultTypeInternal _nodeInfoReply_default_instance_;
class nodePayload;
struct nodePayloadDefaultTypeInternal;
extern nodePayloadDefaultTypeInternal _nodePayload_default_instance_;
class protobufMessage;
struct protobufMessageDefaultTypeInternal;
extern protobufMessageDefaultTypeInternal _protobufMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::broadcastShare* Arena::CreateMaybeMessage<::broadcastShare>(Arena*);
template<> ::dealerShare* Arena::CreateMaybeMessage<::dealerShare>(Arena*);
template<> ::nodeInfo* Arena::CreateMaybeMessage<::nodeInfo>(Arena*);
template<> ::nodeInfoAck* Arena::CreateMaybeMessage<::nodeInfoAck>(Arena*);
template<> ::nodeInfoReply* Arena::CreateMaybeMessage<::nodeInfoReply>(Arena*);
template<> ::nodePayload* Arena::CreateMaybeMessage<::nodePayload>(Arena*);
template<> ::protobufMessage* Arena::CreateMaybeMessage<::protobufMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum nodeType : int {
  undefined = 0,
  secretSharer = 1,
  dealer = 2,
  secretRecoverer = 3,
  nodeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  nodeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool nodeType_IsValid(int value);
constexpr nodeType nodeType_MIN = undefined;
constexpr nodeType nodeType_MAX = secretRecoverer;
constexpr int nodeType_ARRAYSIZE = nodeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* nodeType_descriptor();
template<typename T>
inline const std::string& nodeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, nodeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function nodeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    nodeType_descriptor(), enum_t_value);
}
inline bool nodeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, nodeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<nodeType>(
    nodeType_descriptor(), name, value);
}
// ===================================================================

class protobufMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobufMessage) */ {
 public:
  inline protobufMessage() : protobufMessage(nullptr) {}
  ~protobufMessage() override;
  explicit PROTOBUF_CONSTEXPR protobufMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  protobufMessage(const protobufMessage& from);
  protobufMessage(protobufMessage&& from) noexcept
    : protobufMessage() {
    *this = ::std::move(from);
  }

  inline protobufMessage& operator=(const protobufMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline protobufMessage& operator=(protobufMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const protobufMessage& default_instance() {
    return *internal_default_instance();
  }
  enum CommandCase {
    kNodeInfo = 1,
    kNodeInfoReply = 2,
    kNodeInfoAck = 3,
    kNodePayload = 101,
    kDealerShare = 102,
    kBroadcastShare = 103,
    COMMAND_NOT_SET = 0,
  };

  static inline const protobufMessage* internal_default_instance() {
    return reinterpret_cast<const protobufMessage*>(
               &_protobufMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(protobufMessage& a, protobufMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(protobufMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(protobufMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  protobufMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<protobufMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const protobufMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const protobufMessage& from) {
    protobufMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(protobufMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobufMessage";
  }
  protected:
  explicit protobufMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeInfoFieldNumber = 1,
    kNodeInfoReplyFieldNumber = 2,
    kNodeInfoAckFieldNumber = 3,
    kNodePayloadFieldNumber = 101,
    kDealerShareFieldNumber = 102,
    kBroadcastShareFieldNumber = 103,
  };
  // .nodeInfo nodeInfo = 1;
  bool has_nodeinfo() const;
  private:
  bool _internal_has_nodeinfo() const;
  public:
  void clear_nodeinfo();
  const ::nodeInfo& nodeinfo() const;
  PROTOBUF_NODISCARD ::nodeInfo* release_nodeinfo();
  ::nodeInfo* mutable_nodeinfo();
  void set_allocated_nodeinfo(::nodeInfo* nodeinfo);
  private:
  const ::nodeInfo& _internal_nodeinfo() const;
  ::nodeInfo* _internal_mutable_nodeinfo();
  public:
  void unsafe_arena_set_allocated_nodeinfo(
      ::nodeInfo* nodeinfo);
  ::nodeInfo* unsafe_arena_release_nodeinfo();

  // .nodeInfoReply nodeInfoReply = 2;
  bool has_nodeinforeply() const;
  private:
  bool _internal_has_nodeinforeply() const;
  public:
  void clear_nodeinforeply();
  const ::nodeInfoReply& nodeinforeply() const;
  PROTOBUF_NODISCARD ::nodeInfoReply* release_nodeinforeply();
  ::nodeInfoReply* mutable_nodeinforeply();
  void set_allocated_nodeinforeply(::nodeInfoReply* nodeinforeply);
  private:
  const ::nodeInfoReply& _internal_nodeinforeply() const;
  ::nodeInfoReply* _internal_mutable_nodeinforeply();
  public:
  void unsafe_arena_set_allocated_nodeinforeply(
      ::nodeInfoReply* nodeinforeply);
  ::nodeInfoReply* unsafe_arena_release_nodeinforeply();

  // .nodeInfoAck nodeInfoAck = 3;
  bool has_nodeinfoack() const;
  private:
  bool _internal_has_nodeinfoack() const;
  public:
  void clear_nodeinfoack();
  const ::nodeInfoAck& nodeinfoack() const;
  PROTOBUF_NODISCARD ::nodeInfoAck* release_nodeinfoack();
  ::nodeInfoAck* mutable_nodeinfoack();
  void set_allocated_nodeinfoack(::nodeInfoAck* nodeinfoack);
  private:
  const ::nodeInfoAck& _internal_nodeinfoack() const;
  ::nodeInfoAck* _internal_mutable_nodeinfoack();
  public:
  void unsafe_arena_set_allocated_nodeinfoack(
      ::nodeInfoAck* nodeinfoack);
  ::nodeInfoAck* unsafe_arena_release_nodeinfoack();

  // .nodePayload nodePayload = 101;
  bool has_nodepayload() const;
  private:
  bool _internal_has_nodepayload() const;
  public:
  void clear_nodepayload();
  const ::nodePayload& nodepayload() const;
  PROTOBUF_NODISCARD ::nodePayload* release_nodepayload();
  ::nodePayload* mutable_nodepayload();
  void set_allocated_nodepayload(::nodePayload* nodepayload);
  private:
  const ::nodePayload& _internal_nodepayload() const;
  ::nodePayload* _internal_mutable_nodepayload();
  public:
  void unsafe_arena_set_allocated_nodepayload(
      ::nodePayload* nodepayload);
  ::nodePayload* unsafe_arena_release_nodepayload();

  // .dealerShare dealerShare = 102;
  bool has_dealershare() const;
  private:
  bool _internal_has_dealershare() const;
  public:
  void clear_dealershare();
  const ::dealerShare& dealershare() const;
  PROTOBUF_NODISCARD ::dealerShare* release_dealershare();
  ::dealerShare* mutable_dealershare();
  void set_allocated_dealershare(::dealerShare* dealershare);
  private:
  const ::dealerShare& _internal_dealershare() const;
  ::dealerShare* _internal_mutable_dealershare();
  public:
  void unsafe_arena_set_allocated_dealershare(
      ::dealerShare* dealershare);
  ::dealerShare* unsafe_arena_release_dealershare();

  // .broadcastShare broadcastShare = 103;
  bool has_broadcastshare() const;
  private:
  bool _internal_has_broadcastshare() const;
  public:
  void clear_broadcastshare();
  const ::broadcastShare& broadcastshare() const;
  PROTOBUF_NODISCARD ::broadcastShare* release_broadcastshare();
  ::broadcastShare* mutable_broadcastshare();
  void set_allocated_broadcastshare(::broadcastShare* broadcastshare);
  private:
  const ::broadcastShare& _internal_broadcastshare() const;
  ::broadcastShare* _internal_mutable_broadcastshare();
  public:
  void unsafe_arena_set_allocated_broadcastshare(
      ::broadcastShare* broadcastshare);
  ::broadcastShare* unsafe_arena_release_broadcastshare();

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:protobufMessage)
 private:
  class _Internal;
  void set_has_nodeinfo();
  void set_has_nodeinforeply();
  void set_has_nodeinfoack();
  void set_has_nodepayload();
  void set_has_dealershare();
  void set_has_broadcastshare();

  inline bool has_command() const;
  inline void clear_has_command();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union CommandUnion {
      constexpr CommandUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::nodeInfo* nodeinfo_;
      ::nodeInfoReply* nodeinforeply_;
      ::nodeInfoAck* nodeinfoack_;
      ::nodePayload* nodepayload_;
      ::dealerShare* dealershare_;
      ::broadcastShare* broadcastshare_;
    } command_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_networkMessage_2eproto;
};
// -------------------------------------------------------------------

class nodeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nodeInfo) */ {
 public:
  inline nodeInfo() : nodeInfo(nullptr) {}
  ~nodeInfo() override;
  explicit PROTOBUF_CONSTEXPR nodeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  nodeInfo(const nodeInfo& from);
  nodeInfo(nodeInfo&& from) noexcept
    : nodeInfo() {
    *this = ::std::move(from);
  }

  inline nodeInfo& operator=(const nodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline nodeInfo& operator=(nodeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const nodeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const nodeInfo* internal_default_instance() {
    return reinterpret_cast<const nodeInfo*>(
               &_nodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(nodeInfo& a, nodeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(nodeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(nodeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  nodeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<nodeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const nodeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const nodeInfo& from) {
    nodeInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(nodeInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nodeInfo";
  }
  protected:
  explicit nodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // string Id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .nodeType type = 3;
  void clear_type();
  ::nodeType type() const;
  void set_type(::nodeType value);
  private:
  ::nodeType _internal_type() const;
  void _internal_set_type(::nodeType value);
  public:

  // @@protoc_insertion_point(class_scope:nodeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_networkMessage_2eproto;
};
// -------------------------------------------------------------------

class nodeInfoReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nodeInfoReply) */ {
 public:
  inline nodeInfoReply() : nodeInfoReply(nullptr) {}
  ~nodeInfoReply() override;
  explicit PROTOBUF_CONSTEXPR nodeInfoReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  nodeInfoReply(const nodeInfoReply& from);
  nodeInfoReply(nodeInfoReply&& from) noexcept
    : nodeInfoReply() {
    *this = ::std::move(from);
  }

  inline nodeInfoReply& operator=(const nodeInfoReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline nodeInfoReply& operator=(nodeInfoReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const nodeInfoReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const nodeInfoReply* internal_default_instance() {
    return reinterpret_cast<const nodeInfoReply*>(
               &_nodeInfoReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(nodeInfoReply& a, nodeInfoReply& b) {
    a.Swap(&b);
  }
  inline void Swap(nodeInfoReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(nodeInfoReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  nodeInfoReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<nodeInfoReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const nodeInfoReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const nodeInfoReply& from) {
    nodeInfoReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(nodeInfoReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nodeInfoReply";
  }
  protected:
  explicit nodeInfoReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // string Id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .nodeType type = 3;
  void clear_type();
  ::nodeType type() const;
  void set_type(::nodeType value);
  private:
  ::nodeType _internal_type() const;
  void _internal_set_type(::nodeType value);
  public:

  // @@protoc_insertion_point(class_scope:nodeInfoReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_networkMessage_2eproto;
};
// -------------------------------------------------------------------

class nodeInfoAck final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:nodeInfoAck) */ {
 public:
  inline nodeInfoAck() : nodeInfoAck(nullptr) {}
  explicit PROTOBUF_CONSTEXPR nodeInfoAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  nodeInfoAck(const nodeInfoAck& from);
  nodeInfoAck(nodeInfoAck&& from) noexcept
    : nodeInfoAck() {
    *this = ::std::move(from);
  }

  inline nodeInfoAck& operator=(const nodeInfoAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline nodeInfoAck& operator=(nodeInfoAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const nodeInfoAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const nodeInfoAck* internal_default_instance() {
    return reinterpret_cast<const nodeInfoAck*>(
               &_nodeInfoAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(nodeInfoAck& a, nodeInfoAck& b) {
    a.Swap(&b);
  }
  inline void Swap(nodeInfoAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(nodeInfoAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  nodeInfoAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<nodeInfoAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const nodeInfoAck& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const nodeInfoAck& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nodeInfoAck";
  }
  protected:
  explicit nodeInfoAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nodeInfoAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_networkMessage_2eproto;
};
// -------------------------------------------------------------------

class nodePayload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nodePayload) */ {
 public:
  inline nodePayload() : nodePayload(nullptr) {}
  ~nodePayload() override;
  explicit PROTOBUF_CONSTEXPR nodePayload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  nodePayload(const nodePayload& from);
  nodePayload(nodePayload&& from) noexcept
    : nodePayload() {
    *this = ::std::move(from);
  }

  inline nodePayload& operator=(const nodePayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline nodePayload& operator=(nodePayload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const nodePayload& default_instance() {
    return *internal_default_instance();
  }
  static inline const nodePayload* internal_default_instance() {
    return reinterpret_cast<const nodePayload*>(
               &_nodePayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(nodePayload& a, nodePayload& b) {
    a.Swap(&b);
  }
  inline void Swap(nodePayload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(nodePayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  nodePayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<nodePayload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const nodePayload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const nodePayload& from) {
    nodePayload::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(nodePayload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nodePayload";
  }
  protected:
  explicit nodePayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 1,
  };
  // string Payload = 1;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:nodePayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_networkMessage_2eproto;
};
// -------------------------------------------------------------------

class dealerShare final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dealerShare) */ {
 public:
  inline dealerShare() : dealerShare(nullptr) {}
  ~dealerShare() override;
  explicit PROTOBUF_CONSTEXPR dealerShare(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  dealerShare(const dealerShare& from);
  dealerShare(dealerShare&& from) noexcept
    : dealerShare() {
    *this = ::std::move(from);
  }

  inline dealerShare& operator=(const dealerShare& from) {
    CopyFrom(from);
    return *this;
  }
  inline dealerShare& operator=(dealerShare&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const dealerShare& default_instance() {
    return *internal_default_instance();
  }
  static inline const dealerShare* internal_default_instance() {
    return reinterpret_cast<const dealerShare*>(
               &_dealerShare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(dealerShare& a, dealerShare& b) {
    a.Swap(&b);
  }
  inline void Swap(dealerShare* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dealerShare* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  dealerShare* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<dealerShare>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const dealerShare& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const dealerShare& from) {
    dealerShare::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dealerShare* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dealerShare";
  }
  protected:
  explicit dealerShare(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // string X = 1;
  void clear_x();
  const std::string& x() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_x(ArgT0&& arg0, ArgT... args);
  std::string* mutable_x();
  PROTOBUF_NODISCARD std::string* release_x();
  void set_allocated_x(std::string* x);
  private:
  const std::string& _internal_x() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_x(const std::string& value);
  std::string* _internal_mutable_x();
  public:

  // string Y = 2;
  void clear_y();
  const std::string& y() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_y(ArgT0&& arg0, ArgT... args);
  std::string* mutable_y();
  PROTOBUF_NODISCARD std::string* release_y();
  void set_allocated_y(std::string* y);
  private:
  const std::string& _internal_y() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_y(const std::string& value);
  std::string* _internal_mutable_y();
  public:

  // @@protoc_insertion_point(class_scope:dealerShare)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_networkMessage_2eproto;
};
// -------------------------------------------------------------------

class broadcastShare final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:broadcastShare) */ {
 public:
  inline broadcastShare() : broadcastShare(nullptr) {}
  ~broadcastShare() override;
  explicit PROTOBUF_CONSTEXPR broadcastShare(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  broadcastShare(const broadcastShare& from);
  broadcastShare(broadcastShare&& from) noexcept
    : broadcastShare() {
    *this = ::std::move(from);
  }

  inline broadcastShare& operator=(const broadcastShare& from) {
    CopyFrom(from);
    return *this;
  }
  inline broadcastShare& operator=(broadcastShare&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const broadcastShare& default_instance() {
    return *internal_default_instance();
  }
  static inline const broadcastShare* internal_default_instance() {
    return reinterpret_cast<const broadcastShare*>(
               &_broadcastShare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(broadcastShare& a, broadcastShare& b) {
    a.Swap(&b);
  }
  inline void Swap(broadcastShare* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(broadcastShare* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  broadcastShare* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<broadcastShare>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const broadcastShare& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const broadcastShare& from) {
    broadcastShare::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(broadcastShare* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "broadcastShare";
  }
  protected:
  explicit broadcastShare(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // string X = 1;
  void clear_x();
  const std::string& x() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_x(ArgT0&& arg0, ArgT... args);
  std::string* mutable_x();
  PROTOBUF_NODISCARD std::string* release_x();
  void set_allocated_x(std::string* x);
  private:
  const std::string& _internal_x() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_x(const std::string& value);
  std::string* _internal_mutable_x();
  public:

  // string Y = 2;
  void clear_y();
  const std::string& y() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_y(ArgT0&& arg0, ArgT... args);
  std::string* mutable_y();
  PROTOBUF_NODISCARD std::string* release_y();
  void set_allocated_y(std::string* y);
  private:
  const std::string& _internal_y() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_y(const std::string& value);
  std::string* _internal_mutable_y();
  public:

  // @@protoc_insertion_point(class_scope:broadcastShare)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_networkMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// protobufMessage

// .nodeInfo nodeInfo = 1;
inline bool protobufMessage::_internal_has_nodeinfo() const {
  return command_case() == kNodeInfo;
}
inline bool protobufMessage::has_nodeinfo() const {
  return _internal_has_nodeinfo();
}
inline void protobufMessage::set_has_nodeinfo() {
  _impl_._oneof_case_[0] = kNodeInfo;
}
inline void protobufMessage::clear_nodeinfo() {
  if (_internal_has_nodeinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.command_.nodeinfo_;
    }
    clear_has_command();
  }
}
inline ::nodeInfo* protobufMessage::release_nodeinfo() {
  // @@protoc_insertion_point(field_release:protobufMessage.nodeInfo)
  if (_internal_has_nodeinfo()) {
    clear_has_command();
    ::nodeInfo* temp = _impl_.command_.nodeinfo_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.nodeinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nodeInfo& protobufMessage::_internal_nodeinfo() const {
  return _internal_has_nodeinfo()
      ? *_impl_.command_.nodeinfo_
      : reinterpret_cast< ::nodeInfo&>(::_nodeInfo_default_instance_);
}
inline const ::nodeInfo& protobufMessage::nodeinfo() const {
  // @@protoc_insertion_point(field_get:protobufMessage.nodeInfo)
  return _internal_nodeinfo();
}
inline ::nodeInfo* protobufMessage::unsafe_arena_release_nodeinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobufMessage.nodeInfo)
  if (_internal_has_nodeinfo()) {
    clear_has_command();
    ::nodeInfo* temp = _impl_.command_.nodeinfo_;
    _impl_.command_.nodeinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void protobufMessage::unsafe_arena_set_allocated_nodeinfo(::nodeInfo* nodeinfo) {
  clear_command();
  if (nodeinfo) {
    set_has_nodeinfo();
    _impl_.command_.nodeinfo_ = nodeinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobufMessage.nodeInfo)
}
inline ::nodeInfo* protobufMessage::_internal_mutable_nodeinfo() {
  if (!_internal_has_nodeinfo()) {
    clear_command();
    set_has_nodeinfo();
    _impl_.command_.nodeinfo_ = CreateMaybeMessage< ::nodeInfo >(GetArenaForAllocation());
  }
  return _impl_.command_.nodeinfo_;
}
inline ::nodeInfo* protobufMessage::mutable_nodeinfo() {
  ::nodeInfo* _msg = _internal_mutable_nodeinfo();
  // @@protoc_insertion_point(field_mutable:protobufMessage.nodeInfo)
  return _msg;
}

// .nodeInfoReply nodeInfoReply = 2;
inline bool protobufMessage::_internal_has_nodeinforeply() const {
  return command_case() == kNodeInfoReply;
}
inline bool protobufMessage::has_nodeinforeply() const {
  return _internal_has_nodeinforeply();
}
inline void protobufMessage::set_has_nodeinforeply() {
  _impl_._oneof_case_[0] = kNodeInfoReply;
}
inline void protobufMessage::clear_nodeinforeply() {
  if (_internal_has_nodeinforeply()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.command_.nodeinforeply_;
    }
    clear_has_command();
  }
}
inline ::nodeInfoReply* protobufMessage::release_nodeinforeply() {
  // @@protoc_insertion_point(field_release:protobufMessage.nodeInfoReply)
  if (_internal_has_nodeinforeply()) {
    clear_has_command();
    ::nodeInfoReply* temp = _impl_.command_.nodeinforeply_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.nodeinforeply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nodeInfoReply& protobufMessage::_internal_nodeinforeply() const {
  return _internal_has_nodeinforeply()
      ? *_impl_.command_.nodeinforeply_
      : reinterpret_cast< ::nodeInfoReply&>(::_nodeInfoReply_default_instance_);
}
inline const ::nodeInfoReply& protobufMessage::nodeinforeply() const {
  // @@protoc_insertion_point(field_get:protobufMessage.nodeInfoReply)
  return _internal_nodeinforeply();
}
inline ::nodeInfoReply* protobufMessage::unsafe_arena_release_nodeinforeply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobufMessage.nodeInfoReply)
  if (_internal_has_nodeinforeply()) {
    clear_has_command();
    ::nodeInfoReply* temp = _impl_.command_.nodeinforeply_;
    _impl_.command_.nodeinforeply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void protobufMessage::unsafe_arena_set_allocated_nodeinforeply(::nodeInfoReply* nodeinforeply) {
  clear_command();
  if (nodeinforeply) {
    set_has_nodeinforeply();
    _impl_.command_.nodeinforeply_ = nodeinforeply;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobufMessage.nodeInfoReply)
}
inline ::nodeInfoReply* protobufMessage::_internal_mutable_nodeinforeply() {
  if (!_internal_has_nodeinforeply()) {
    clear_command();
    set_has_nodeinforeply();
    _impl_.command_.nodeinforeply_ = CreateMaybeMessage< ::nodeInfoReply >(GetArenaForAllocation());
  }
  return _impl_.command_.nodeinforeply_;
}
inline ::nodeInfoReply* protobufMessage::mutable_nodeinforeply() {
  ::nodeInfoReply* _msg = _internal_mutable_nodeinforeply();
  // @@protoc_insertion_point(field_mutable:protobufMessage.nodeInfoReply)
  return _msg;
}

// .nodeInfoAck nodeInfoAck = 3;
inline bool protobufMessage::_internal_has_nodeinfoack() const {
  return command_case() == kNodeInfoAck;
}
inline bool protobufMessage::has_nodeinfoack() const {
  return _internal_has_nodeinfoack();
}
inline void protobufMessage::set_has_nodeinfoack() {
  _impl_._oneof_case_[0] = kNodeInfoAck;
}
inline void protobufMessage::clear_nodeinfoack() {
  if (_internal_has_nodeinfoack()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.command_.nodeinfoack_;
    }
    clear_has_command();
  }
}
inline ::nodeInfoAck* protobufMessage::release_nodeinfoack() {
  // @@protoc_insertion_point(field_release:protobufMessage.nodeInfoAck)
  if (_internal_has_nodeinfoack()) {
    clear_has_command();
    ::nodeInfoAck* temp = _impl_.command_.nodeinfoack_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.nodeinfoack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nodeInfoAck& protobufMessage::_internal_nodeinfoack() const {
  return _internal_has_nodeinfoack()
      ? *_impl_.command_.nodeinfoack_
      : reinterpret_cast< ::nodeInfoAck&>(::_nodeInfoAck_default_instance_);
}
inline const ::nodeInfoAck& protobufMessage::nodeinfoack() const {
  // @@protoc_insertion_point(field_get:protobufMessage.nodeInfoAck)
  return _internal_nodeinfoack();
}
inline ::nodeInfoAck* protobufMessage::unsafe_arena_release_nodeinfoack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobufMessage.nodeInfoAck)
  if (_internal_has_nodeinfoack()) {
    clear_has_command();
    ::nodeInfoAck* temp = _impl_.command_.nodeinfoack_;
    _impl_.command_.nodeinfoack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void protobufMessage::unsafe_arena_set_allocated_nodeinfoack(::nodeInfoAck* nodeinfoack) {
  clear_command();
  if (nodeinfoack) {
    set_has_nodeinfoack();
    _impl_.command_.nodeinfoack_ = nodeinfoack;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobufMessage.nodeInfoAck)
}
inline ::nodeInfoAck* protobufMessage::_internal_mutable_nodeinfoack() {
  if (!_internal_has_nodeinfoack()) {
    clear_command();
    set_has_nodeinfoack();
    _impl_.command_.nodeinfoack_ = CreateMaybeMessage< ::nodeInfoAck >(GetArenaForAllocation());
  }
  return _impl_.command_.nodeinfoack_;
}
inline ::nodeInfoAck* protobufMessage::mutable_nodeinfoack() {
  ::nodeInfoAck* _msg = _internal_mutable_nodeinfoack();
  // @@protoc_insertion_point(field_mutable:protobufMessage.nodeInfoAck)
  return _msg;
}

// .nodePayload nodePayload = 101;
inline bool protobufMessage::_internal_has_nodepayload() const {
  return command_case() == kNodePayload;
}
inline bool protobufMessage::has_nodepayload() const {
  return _internal_has_nodepayload();
}
inline void protobufMessage::set_has_nodepayload() {
  _impl_._oneof_case_[0] = kNodePayload;
}
inline void protobufMessage::clear_nodepayload() {
  if (_internal_has_nodepayload()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.command_.nodepayload_;
    }
    clear_has_command();
  }
}
inline ::nodePayload* protobufMessage::release_nodepayload() {
  // @@protoc_insertion_point(field_release:protobufMessage.nodePayload)
  if (_internal_has_nodepayload()) {
    clear_has_command();
    ::nodePayload* temp = _impl_.command_.nodepayload_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.nodepayload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nodePayload& protobufMessage::_internal_nodepayload() const {
  return _internal_has_nodepayload()
      ? *_impl_.command_.nodepayload_
      : reinterpret_cast< ::nodePayload&>(::_nodePayload_default_instance_);
}
inline const ::nodePayload& protobufMessage::nodepayload() const {
  // @@protoc_insertion_point(field_get:protobufMessage.nodePayload)
  return _internal_nodepayload();
}
inline ::nodePayload* protobufMessage::unsafe_arena_release_nodepayload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobufMessage.nodePayload)
  if (_internal_has_nodepayload()) {
    clear_has_command();
    ::nodePayload* temp = _impl_.command_.nodepayload_;
    _impl_.command_.nodepayload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void protobufMessage::unsafe_arena_set_allocated_nodepayload(::nodePayload* nodepayload) {
  clear_command();
  if (nodepayload) {
    set_has_nodepayload();
    _impl_.command_.nodepayload_ = nodepayload;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobufMessage.nodePayload)
}
inline ::nodePayload* protobufMessage::_internal_mutable_nodepayload() {
  if (!_internal_has_nodepayload()) {
    clear_command();
    set_has_nodepayload();
    _impl_.command_.nodepayload_ = CreateMaybeMessage< ::nodePayload >(GetArenaForAllocation());
  }
  return _impl_.command_.nodepayload_;
}
inline ::nodePayload* protobufMessage::mutable_nodepayload() {
  ::nodePayload* _msg = _internal_mutable_nodepayload();
  // @@protoc_insertion_point(field_mutable:protobufMessage.nodePayload)
  return _msg;
}

// .dealerShare dealerShare = 102;
inline bool protobufMessage::_internal_has_dealershare() const {
  return command_case() == kDealerShare;
}
inline bool protobufMessage::has_dealershare() const {
  return _internal_has_dealershare();
}
inline void protobufMessage::set_has_dealershare() {
  _impl_._oneof_case_[0] = kDealerShare;
}
inline void protobufMessage::clear_dealershare() {
  if (_internal_has_dealershare()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.command_.dealershare_;
    }
    clear_has_command();
  }
}
inline ::dealerShare* protobufMessage::release_dealershare() {
  // @@protoc_insertion_point(field_release:protobufMessage.dealerShare)
  if (_internal_has_dealershare()) {
    clear_has_command();
    ::dealerShare* temp = _impl_.command_.dealershare_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.dealershare_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dealerShare& protobufMessage::_internal_dealershare() const {
  return _internal_has_dealershare()
      ? *_impl_.command_.dealershare_
      : reinterpret_cast< ::dealerShare&>(::_dealerShare_default_instance_);
}
inline const ::dealerShare& protobufMessage::dealershare() const {
  // @@protoc_insertion_point(field_get:protobufMessage.dealerShare)
  return _internal_dealershare();
}
inline ::dealerShare* protobufMessage::unsafe_arena_release_dealershare() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobufMessage.dealerShare)
  if (_internal_has_dealershare()) {
    clear_has_command();
    ::dealerShare* temp = _impl_.command_.dealershare_;
    _impl_.command_.dealershare_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void protobufMessage::unsafe_arena_set_allocated_dealershare(::dealerShare* dealershare) {
  clear_command();
  if (dealershare) {
    set_has_dealershare();
    _impl_.command_.dealershare_ = dealershare;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobufMessage.dealerShare)
}
inline ::dealerShare* protobufMessage::_internal_mutable_dealershare() {
  if (!_internal_has_dealershare()) {
    clear_command();
    set_has_dealershare();
    _impl_.command_.dealershare_ = CreateMaybeMessage< ::dealerShare >(GetArenaForAllocation());
  }
  return _impl_.command_.dealershare_;
}
inline ::dealerShare* protobufMessage::mutable_dealershare() {
  ::dealerShare* _msg = _internal_mutable_dealershare();
  // @@protoc_insertion_point(field_mutable:protobufMessage.dealerShare)
  return _msg;
}

// .broadcastShare broadcastShare = 103;
inline bool protobufMessage::_internal_has_broadcastshare() const {
  return command_case() == kBroadcastShare;
}
inline bool protobufMessage::has_broadcastshare() const {
  return _internal_has_broadcastshare();
}
inline void protobufMessage::set_has_broadcastshare() {
  _impl_._oneof_case_[0] = kBroadcastShare;
}
inline void protobufMessage::clear_broadcastshare() {
  if (_internal_has_broadcastshare()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.command_.broadcastshare_;
    }
    clear_has_command();
  }
}
inline ::broadcastShare* protobufMessage::release_broadcastshare() {
  // @@protoc_insertion_point(field_release:protobufMessage.broadcastShare)
  if (_internal_has_broadcastshare()) {
    clear_has_command();
    ::broadcastShare* temp = _impl_.command_.broadcastshare_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.broadcastshare_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::broadcastShare& protobufMessage::_internal_broadcastshare() const {
  return _internal_has_broadcastshare()
      ? *_impl_.command_.broadcastshare_
      : reinterpret_cast< ::broadcastShare&>(::_broadcastShare_default_instance_);
}
inline const ::broadcastShare& protobufMessage::broadcastshare() const {
  // @@protoc_insertion_point(field_get:protobufMessage.broadcastShare)
  return _internal_broadcastshare();
}
inline ::broadcastShare* protobufMessage::unsafe_arena_release_broadcastshare() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobufMessage.broadcastShare)
  if (_internal_has_broadcastshare()) {
    clear_has_command();
    ::broadcastShare* temp = _impl_.command_.broadcastshare_;
    _impl_.command_.broadcastshare_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void protobufMessage::unsafe_arena_set_allocated_broadcastshare(::broadcastShare* broadcastshare) {
  clear_command();
  if (broadcastshare) {
    set_has_broadcastshare();
    _impl_.command_.broadcastshare_ = broadcastshare;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobufMessage.broadcastShare)
}
inline ::broadcastShare* protobufMessage::_internal_mutable_broadcastshare() {
  if (!_internal_has_broadcastshare()) {
    clear_command();
    set_has_broadcastshare();
    _impl_.command_.broadcastshare_ = CreateMaybeMessage< ::broadcastShare >(GetArenaForAllocation());
  }
  return _impl_.command_.broadcastshare_;
}
inline ::broadcastShare* protobufMessage::mutable_broadcastshare() {
  ::broadcastShare* _msg = _internal_mutable_broadcastshare();
  // @@protoc_insertion_point(field_mutable:protobufMessage.broadcastShare)
  return _msg;
}

inline bool protobufMessage::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void protobufMessage::clear_has_command() {
  _impl_._oneof_case_[0] = COMMAND_NOT_SET;
}
inline protobufMessage::CommandCase protobufMessage::command_case() const {
  return protobufMessage::CommandCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// nodeInfo

// string Id = 1;
inline void nodeInfo::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& nodeInfo::id() const {
  // @@protoc_insertion_point(field_get:nodeInfo.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void nodeInfo::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nodeInfo.Id)
}
inline std::string* nodeInfo::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:nodeInfo.Id)
  return _s;
}
inline const std::string& nodeInfo::_internal_id() const {
  return _impl_.id_.Get();
}
inline void nodeInfo::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* nodeInfo::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* nodeInfo::release_id() {
  // @@protoc_insertion_point(field_release:nodeInfo.Id)
  return _impl_.id_.Release();
}
inline void nodeInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nodeInfo.Id)
}

// string Name = 2;
inline void nodeInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& nodeInfo::name() const {
  // @@protoc_insertion_point(field_get:nodeInfo.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void nodeInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nodeInfo.Name)
}
inline std::string* nodeInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:nodeInfo.Name)
  return _s;
}
inline const std::string& nodeInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void nodeInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* nodeInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* nodeInfo::release_name() {
  // @@protoc_insertion_point(field_release:nodeInfo.Name)
  return _impl_.name_.Release();
}
inline void nodeInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nodeInfo.Name)
}

// .nodeType type = 3;
inline void nodeInfo::clear_type() {
  _impl_.type_ = 0;
}
inline ::nodeType nodeInfo::_internal_type() const {
  return static_cast< ::nodeType >(_impl_.type_);
}
inline ::nodeType nodeInfo::type() const {
  // @@protoc_insertion_point(field_get:nodeInfo.type)
  return _internal_type();
}
inline void nodeInfo::_internal_set_type(::nodeType value) {
  
  _impl_.type_ = value;
}
inline void nodeInfo::set_type(::nodeType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:nodeInfo.type)
}

// -------------------------------------------------------------------

// nodeInfoReply

// string Id = 1;
inline void nodeInfoReply::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& nodeInfoReply::id() const {
  // @@protoc_insertion_point(field_get:nodeInfoReply.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void nodeInfoReply::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nodeInfoReply.Id)
}
inline std::string* nodeInfoReply::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:nodeInfoReply.Id)
  return _s;
}
inline const std::string& nodeInfoReply::_internal_id() const {
  return _impl_.id_.Get();
}
inline void nodeInfoReply::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* nodeInfoReply::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* nodeInfoReply::release_id() {
  // @@protoc_insertion_point(field_release:nodeInfoReply.Id)
  return _impl_.id_.Release();
}
inline void nodeInfoReply::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nodeInfoReply.Id)
}

// string Name = 2;
inline void nodeInfoReply::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& nodeInfoReply::name() const {
  // @@protoc_insertion_point(field_get:nodeInfoReply.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void nodeInfoReply::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nodeInfoReply.Name)
}
inline std::string* nodeInfoReply::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:nodeInfoReply.Name)
  return _s;
}
inline const std::string& nodeInfoReply::_internal_name() const {
  return _impl_.name_.Get();
}
inline void nodeInfoReply::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* nodeInfoReply::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* nodeInfoReply::release_name() {
  // @@protoc_insertion_point(field_release:nodeInfoReply.Name)
  return _impl_.name_.Release();
}
inline void nodeInfoReply::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nodeInfoReply.Name)
}

// .nodeType type = 3;
inline void nodeInfoReply::clear_type() {
  _impl_.type_ = 0;
}
inline ::nodeType nodeInfoReply::_internal_type() const {
  return static_cast< ::nodeType >(_impl_.type_);
}
inline ::nodeType nodeInfoReply::type() const {
  // @@protoc_insertion_point(field_get:nodeInfoReply.type)
  return _internal_type();
}
inline void nodeInfoReply::_internal_set_type(::nodeType value) {
  
  _impl_.type_ = value;
}
inline void nodeInfoReply::set_type(::nodeType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:nodeInfoReply.type)
}

// -------------------------------------------------------------------

// nodeInfoAck

// -------------------------------------------------------------------

// nodePayload

// string Payload = 1;
inline void nodePayload::clear_payload() {
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& nodePayload::payload() const {
  // @@protoc_insertion_point(field_get:nodePayload.Payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void nodePayload::set_payload(ArgT0&& arg0, ArgT... args) {
 
 _impl_.payload_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nodePayload.Payload)
}
inline std::string* nodePayload::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:nodePayload.Payload)
  return _s;
}
inline const std::string& nodePayload::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void nodePayload::_internal_set_payload(const std::string& value) {
  
  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* nodePayload::_internal_mutable_payload() {
  
  return _impl_.payload_.Mutable(GetArenaForAllocation());
}
inline std::string* nodePayload::release_payload() {
  // @@protoc_insertion_point(field_release:nodePayload.Payload)
  return _impl_.payload_.Release();
}
inline void nodePayload::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  _impl_.payload_.SetAllocated(payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nodePayload.Payload)
}

// -------------------------------------------------------------------

// dealerShare

// string X = 1;
inline void dealerShare::clear_x() {
  _impl_.x_.ClearToEmpty();
}
inline const std::string& dealerShare::x() const {
  // @@protoc_insertion_point(field_get:dealerShare.X)
  return _internal_x();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void dealerShare::set_x(ArgT0&& arg0, ArgT... args) {
 
 _impl_.x_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dealerShare.X)
}
inline std::string* dealerShare::mutable_x() {
  std::string* _s = _internal_mutable_x();
  // @@protoc_insertion_point(field_mutable:dealerShare.X)
  return _s;
}
inline const std::string& dealerShare::_internal_x() const {
  return _impl_.x_.Get();
}
inline void dealerShare::_internal_set_x(const std::string& value) {
  
  _impl_.x_.Set(value, GetArenaForAllocation());
}
inline std::string* dealerShare::_internal_mutable_x() {
  
  return _impl_.x_.Mutable(GetArenaForAllocation());
}
inline std::string* dealerShare::release_x() {
  // @@protoc_insertion_point(field_release:dealerShare.X)
  return _impl_.x_.Release();
}
inline void dealerShare::set_allocated_x(std::string* x) {
  if (x != nullptr) {
    
  } else {
    
  }
  _impl_.x_.SetAllocated(x, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.x_.IsDefault()) {
    _impl_.x_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dealerShare.X)
}

// string Y = 2;
inline void dealerShare::clear_y() {
  _impl_.y_.ClearToEmpty();
}
inline const std::string& dealerShare::y() const {
  // @@protoc_insertion_point(field_get:dealerShare.Y)
  return _internal_y();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void dealerShare::set_y(ArgT0&& arg0, ArgT... args) {
 
 _impl_.y_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dealerShare.Y)
}
inline std::string* dealerShare::mutable_y() {
  std::string* _s = _internal_mutable_y();
  // @@protoc_insertion_point(field_mutable:dealerShare.Y)
  return _s;
}
inline const std::string& dealerShare::_internal_y() const {
  return _impl_.y_.Get();
}
inline void dealerShare::_internal_set_y(const std::string& value) {
  
  _impl_.y_.Set(value, GetArenaForAllocation());
}
inline std::string* dealerShare::_internal_mutable_y() {
  
  return _impl_.y_.Mutable(GetArenaForAllocation());
}
inline std::string* dealerShare::release_y() {
  // @@protoc_insertion_point(field_release:dealerShare.Y)
  return _impl_.y_.Release();
}
inline void dealerShare::set_allocated_y(std::string* y) {
  if (y != nullptr) {
    
  } else {
    
  }
  _impl_.y_.SetAllocated(y, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.y_.IsDefault()) {
    _impl_.y_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dealerShare.Y)
}

// -------------------------------------------------------------------

// broadcastShare

// string X = 1;
inline void broadcastShare::clear_x() {
  _impl_.x_.ClearToEmpty();
}
inline const std::string& broadcastShare::x() const {
  // @@protoc_insertion_point(field_get:broadcastShare.X)
  return _internal_x();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void broadcastShare::set_x(ArgT0&& arg0, ArgT... args) {
 
 _impl_.x_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:broadcastShare.X)
}
inline std::string* broadcastShare::mutable_x() {
  std::string* _s = _internal_mutable_x();
  // @@protoc_insertion_point(field_mutable:broadcastShare.X)
  return _s;
}
inline const std::string& broadcastShare::_internal_x() const {
  return _impl_.x_.Get();
}
inline void broadcastShare::_internal_set_x(const std::string& value) {
  
  _impl_.x_.Set(value, GetArenaForAllocation());
}
inline std::string* broadcastShare::_internal_mutable_x() {
  
  return _impl_.x_.Mutable(GetArenaForAllocation());
}
inline std::string* broadcastShare::release_x() {
  // @@protoc_insertion_point(field_release:broadcastShare.X)
  return _impl_.x_.Release();
}
inline void broadcastShare::set_allocated_x(std::string* x) {
  if (x != nullptr) {
    
  } else {
    
  }
  _impl_.x_.SetAllocated(x, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.x_.IsDefault()) {
    _impl_.x_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:broadcastShare.X)
}

// string Y = 2;
inline void broadcastShare::clear_y() {
  _impl_.y_.ClearToEmpty();
}
inline const std::string& broadcastShare::y() const {
  // @@protoc_insertion_point(field_get:broadcastShare.Y)
  return _internal_y();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void broadcastShare::set_y(ArgT0&& arg0, ArgT... args) {
 
 _impl_.y_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:broadcastShare.Y)
}
inline std::string* broadcastShare::mutable_y() {
  std::string* _s = _internal_mutable_y();
  // @@protoc_insertion_point(field_mutable:broadcastShare.Y)
  return _s;
}
inline const std::string& broadcastShare::_internal_y() const {
  return _impl_.y_.Get();
}
inline void broadcastShare::_internal_set_y(const std::string& value) {
  
  _impl_.y_.Set(value, GetArenaForAllocation());
}
inline std::string* broadcastShare::_internal_mutable_y() {
  
  return _impl_.y_.Mutable(GetArenaForAllocation());
}
inline std::string* broadcastShare::release_y() {
  // @@protoc_insertion_point(field_release:broadcastShare.Y)
  return _impl_.y_.Release();
}
inline void broadcastShare::set_allocated_y(std::string* y) {
  if (y != nullptr) {
    
  } else {
    
  }
  _impl_.y_.SetAllocated(y, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.y_.IsDefault()) {
    _impl_.y_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:broadcastShare.Y)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::nodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nodeType>() {
  return ::nodeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_networkMessage_2eproto
